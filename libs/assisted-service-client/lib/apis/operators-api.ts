/* tslint:disable */
/* eslint-disable */
/**
 * AssistedInstall
 * Assisted installation
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InfraError } from '../models';
import { MonitoredOperatorsList } from '../models';
import { OperatorMonitorReport } from '../models';
import { OperatorProperties } from '../models';
/**
 * OperatorsApi - axios parameter creator
 * @export
 */
export const OperatorsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Lists operators to be monitored for a cluster.
     * @param {string} clusterId The cluster to return operators for.
     * @param {string} [operatorName] An operator in the specified cluster to return its data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2ListOfClusterOperators: async (
      clusterId: string,
      operatorName?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'clusterId' is not null or undefined
      if (clusterId === null || clusterId === undefined) {
        throw new RequiredError(
          'clusterId',
          'Required parameter clusterId was null or undefined when calling v2ListOfClusterOperators.',
        );
      }
      const localVarPath = `/v2/clusters/{cluster_id}/monitored-operators`.replace(
        `{${'cluster_id'}}`,
        encodeURIComponent(String(clusterId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication agentAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Secret-Key')
            : await configuration.apiKey;
        localVarHeaderParameter['X-Secret-Key'] = localVarApiKeyValue;
      }

      if (operatorName !== undefined) {
        localVarQueryParameter['operator_name'] = operatorName;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Lists properties for an operator.
     * @param {string} operatorName The operator name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2ListOperatorProperties: async (
      operatorName: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'operatorName' is not null or undefined
      if (operatorName === null || operatorName === undefined) {
        throw new RequiredError(
          'operatorName',
          'Required parameter operatorName was null or undefined when calling v2ListOperatorProperties.',
        );
      }
      const localVarPath = `/v2/supported-operators/{operator_name}`.replace(
        `{${'operator_name'}}`,
        encodeURIComponent(String(operatorName)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication userAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Retrieves the list of supported operators.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2ListSupportedOperators: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/v2/supported-operators`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication userAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Controller API to report of monitored operators.
     * @param {OperatorMonitorReport} body The operators monitor report.
     * @param {string} clusterId The cluster whose operators are being monitored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2ReportMonitoredOperatorStatus: async (
      body: OperatorMonitorReport,
      clusterId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling v2ReportMonitoredOperatorStatus.',
        );
      }
      // verify required parameter 'clusterId' is not null or undefined
      if (clusterId === null || clusterId === undefined) {
        throw new RequiredError(
          'clusterId',
          'Required parameter clusterId was null or undefined when calling v2ReportMonitoredOperatorStatus.',
        );
      }
      const localVarPath = `/v2/clusters/{cluster_id}/monitored-operators`.replace(
        `{${'cluster_id'}}`,
        encodeURIComponent(String(clusterId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication agentAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('X-Secret-Key')
            : await configuration.apiKey;
        localVarHeaderParameter['X-Secret-Key'] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * OperatorsApi - functional programming interface
 * @export
 */
export const OperatorsApiFp = function (configuration?: Configuration) {
  return {
    /**
     * Lists operators to be monitored for a cluster.
     * @param {string} clusterId The cluster to return operators for.
     * @param {string} [operatorName] An operator in the specified cluster to return its data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2ListOfClusterOperators(
      clusterId: string,
      operatorName?: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MonitoredOperatorsList>>
    > {
      const localVarAxiosArgs = await OperatorsApiAxiosParamCreator(
        configuration,
      ).v2ListOfClusterOperators(clusterId, operatorName, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Lists properties for an operator.
     * @param {string} operatorName The operator name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2ListOperatorProperties(
      operatorName: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OperatorProperties>>
    > {
      const localVarAxiosArgs = await OperatorsApiAxiosParamCreator(
        configuration,
      ).v2ListOperatorProperties(operatorName, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieves the list of supported operators.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2ListSupportedOperators(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>
    > {
      const localVarAxiosArgs = await OperatorsApiAxiosParamCreator(
        configuration,
      ).v2ListSupportedOperators(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Controller API to report of monitored operators.
     * @param {OperatorMonitorReport} body The operators monitor report.
     * @param {string} clusterId The cluster whose operators are being monitored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2ReportMonitoredOperatorStatus(
      body: OperatorMonitorReport,
      clusterId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
      const localVarAxiosArgs = await OperatorsApiAxiosParamCreator(
        configuration,
      ).v2ReportMonitoredOperatorStatus(body, clusterId, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * OperatorsApi - factory interface
 * @export
 */
export const OperatorsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     * Lists operators to be monitored for a cluster.
     * @param {string} clusterId The cluster to return operators for.
     * @param {string} [operatorName] An operator in the specified cluster to return its data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2ListOfClusterOperators(
      clusterId: string,
      operatorName?: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<MonitoredOperatorsList>> {
      return OperatorsApiFp(configuration)
        .v2ListOfClusterOperators(clusterId, operatorName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Lists properties for an operator.
     * @param {string} operatorName The operator name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2ListOperatorProperties(
      operatorName: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<OperatorProperties>> {
      return OperatorsApiFp(configuration)
        .v2ListOperatorProperties(operatorName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Retrieves the list of supported operators.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2ListSupportedOperators(
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Array<string>>> {
      return OperatorsApiFp(configuration)
        .v2ListSupportedOperators(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Controller API to report of monitored operators.
     * @param {OperatorMonitorReport} body The operators monitor report.
     * @param {string} clusterId The cluster whose operators are being monitored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2ReportMonitoredOperatorStatus(
      body: OperatorMonitorReport,
      clusterId: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return OperatorsApiFp(configuration)
        .v2ReportMonitoredOperatorStatus(body, clusterId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * OperatorsApi - object-oriented interface
 * @export
 * @class OperatorsApi
 * @extends {BaseAPI}
 */
export class OperatorsApi extends BaseAPI {
  /**
   * Lists operators to be monitored for a cluster.
   * @param {string} clusterId The cluster to return operators for.
   * @param {string} [operatorName] An operator in the specified cluster to return its data.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OperatorsApi
   */
  public async v2ListOfClusterOperators(
    clusterId: string,
    operatorName?: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<MonitoredOperatorsList>> {
    return OperatorsApiFp(this.configuration)
      .v2ListOfClusterOperators(clusterId, operatorName, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Lists properties for an operator.
   * @param {string} operatorName The operator name.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OperatorsApi
   */
  public async v2ListOperatorProperties(
    operatorName: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<OperatorProperties>> {
    return OperatorsApiFp(this.configuration)
      .v2ListOperatorProperties(operatorName, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Retrieves the list of supported operators.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OperatorsApi
   */
  public async v2ListSupportedOperators(
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Array<string>>> {
    return OperatorsApiFp(this.configuration)
      .v2ListSupportedOperators(options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Controller API to report of monitored operators.
   * @param {OperatorMonitorReport} body The operators monitor report.
   * @param {string} clusterId The cluster whose operators are being monitored.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OperatorsApi
   */
  public async v2ReportMonitoredOperatorStatus(
    body: OperatorMonitorReport,
    clusterId: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return OperatorsApiFp(this.configuration)
      .v2ReportMonitoredOperatorStatus(body, clusterId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
