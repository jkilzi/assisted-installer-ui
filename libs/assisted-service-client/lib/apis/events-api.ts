/* tslint:disable */
/* eslint-disable */
/**
 * AssistedInstall
 * Assisted installation
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { EventList } from '../models';
import { InfraError } from '../models';
/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Lists events for a cluster.
     * @param {string} [clusterId] The cluster to return events for.
     * @param {string} [hostId] A host in the specified cluster to return events for (DEPRECATED. Use &#x60;host_ids&#x60; instead).
     * @param {Array<string>} [hostIds] Hosts in the specified cluster to return events for.
     * @param {string} [infraEnvId] The infra-env to return events for.
     * @param {number} [limit] The maximum number of records to retrieve.
     * @param {number} [offset] Number of records to skip before starting to return the records.
     * @param {string} [order] Order by event_time of events retrieved.
     * @param {Array<string>} [severities] Retrieved events severities.
     * @param {string} [message] Retrieved events message pattern.
     * @param {boolean} [deletedHosts] Deleted hosts flag.
     * @param {boolean} [clusterLevel] Cluster level events flag.
     * @param {Array<string>} [categories] A comma-separated list of event categories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2ListEvents: async (
      clusterId?: string,
      hostId?: string,
      hostIds?: Array<string>,
      infraEnvId?: string,
      limit?: number,
      offset?: number,
      order?: string,
      severities?: Array<string>,
      message?: string,
      deletedHosts?: boolean,
      clusterLevel?: boolean,
      categories?: Array<string>,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/v2/events`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication urlAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('api_key')
            : await configuration.apiKey;
        localVarQueryParameter['api_key'] = localVarApiKeyValue;
      }

      // authentication userAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      if (clusterId !== undefined) {
        localVarQueryParameter['cluster_id'] = clusterId;
      }

      if (hostId !== undefined) {
        localVarQueryParameter['host_id'] = hostId;
      }

      if (hostIds) {
        localVarQueryParameter['host_ids'] = hostIds.join(COLLECTION_FORMATS.csv);
      }

      if (infraEnvId !== undefined) {
        localVarQueryParameter['infra_env_id'] = infraEnvId;
      }

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit;
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset;
      }

      if (order !== undefined) {
        localVarQueryParameter['order'] = order;
      }

      if (severities) {
        localVarQueryParameter['severities'] = severities.join(COLLECTION_FORMATS.csv);
      }

      if (message !== undefined) {
        localVarQueryParameter['message'] = message;
      }

      if (deletedHosts !== undefined) {
        localVarQueryParameter['deleted_hosts'] = deletedHosts;
      }

      if (clusterLevel !== undefined) {
        localVarQueryParameter['cluster_level'] = clusterLevel;
      }

      if (categories) {
        localVarQueryParameter['categories'] = categories.join(COLLECTION_FORMATS.csv);
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function (configuration?: Configuration) {
  return {
    /**
     * Lists events for a cluster.
     * @param {string} [clusterId] The cluster to return events for.
     * @param {string} [hostId] A host in the specified cluster to return events for (DEPRECATED. Use &#x60;host_ids&#x60; instead).
     * @param {Array<string>} [hostIds] Hosts in the specified cluster to return events for.
     * @param {string} [infraEnvId] The infra-env to return events for.
     * @param {number} [limit] The maximum number of records to retrieve.
     * @param {number} [offset] Number of records to skip before starting to return the records.
     * @param {string} [order] Order by event_time of events retrieved.
     * @param {Array<string>} [severities] Retrieved events severities.
     * @param {string} [message] Retrieved events message pattern.
     * @param {boolean} [deletedHosts] Deleted hosts flag.
     * @param {boolean} [clusterLevel] Cluster level events flag.
     * @param {Array<string>} [categories] A comma-separated list of event categories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2ListEvents(
      clusterId?: string,
      hostId?: string,
      hostIds?: Array<string>,
      infraEnvId?: string,
      limit?: number,
      offset?: number,
      order?: string,
      severities?: Array<string>,
      message?: string,
      deletedHosts?: boolean,
      clusterLevel?: boolean,
      categories?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<EventList>>> {
      const localVarAxiosArgs = await EventsApiAxiosParamCreator(configuration).v2ListEvents(
        clusterId,
        hostId,
        hostIds,
        infraEnvId,
        limit,
        offset,
        order,
        severities,
        message,
        deletedHosts,
        clusterLevel,
        categories,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     * Lists events for a cluster.
     * @param {string} [clusterId] The cluster to return events for.
     * @param {string} [hostId] A host in the specified cluster to return events for (DEPRECATED. Use &#x60;host_ids&#x60; instead).
     * @param {Array<string>} [hostIds] Hosts in the specified cluster to return events for.
     * @param {string} [infraEnvId] The infra-env to return events for.
     * @param {number} [limit] The maximum number of records to retrieve.
     * @param {number} [offset] Number of records to skip before starting to return the records.
     * @param {string} [order] Order by event_time of events retrieved.
     * @param {Array<string>} [severities] Retrieved events severities.
     * @param {string} [message] Retrieved events message pattern.
     * @param {boolean} [deletedHosts] Deleted hosts flag.
     * @param {boolean} [clusterLevel] Cluster level events flag.
     * @param {Array<string>} [categories] A comma-separated list of event categories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2ListEvents(
      clusterId?: string,
      hostId?: string,
      hostIds?: Array<string>,
      infraEnvId?: string,
      limit?: number,
      offset?: number,
      order?: string,
      severities?: Array<string>,
      message?: string,
      deletedHosts?: boolean,
      clusterLevel?: boolean,
      categories?: Array<string>,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<EventList>> {
      return EventsApiFp(configuration)
        .v2ListEvents(
          clusterId,
          hostId,
          hostIds,
          infraEnvId,
          limit,
          offset,
          order,
          severities,
          message,
          deletedHosts,
          clusterLevel,
          categories,
          options,
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI {
  /**
   * Lists events for a cluster.
   * @param {string} [clusterId] The cluster to return events for.
   * @param {string} [hostId] A host in the specified cluster to return events for (DEPRECATED. Use &#x60;host_ids&#x60; instead).
   * @param {Array<string>} [hostIds] Hosts in the specified cluster to return events for.
   * @param {string} [infraEnvId] The infra-env to return events for.
   * @param {number} [limit] The maximum number of records to retrieve.
   * @param {number} [offset] Number of records to skip before starting to return the records.
   * @param {string} [order] Order by event_time of events retrieved.
   * @param {Array<string>} [severities] Retrieved events severities.
   * @param {string} [message] Retrieved events message pattern.
   * @param {boolean} [deletedHosts] Deleted hosts flag.
   * @param {boolean} [clusterLevel] Cluster level events flag.
   * @param {Array<string>} [categories] A comma-separated list of event categories.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EventsApi
   */
  public async v2ListEvents(
    clusterId?: string,
    hostId?: string,
    hostIds?: Array<string>,
    infraEnvId?: string,
    limit?: number,
    offset?: number,
    order?: string,
    severities?: Array<string>,
    message?: string,
    deletedHosts?: boolean,
    clusterLevel?: boolean,
    categories?: Array<string>,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<EventList>> {
    return EventsApiFp(this.configuration)
      .v2ListEvents(
        clusterId,
        hostId,
        hostIds,
        infraEnvId,
        limit,
        offset,
        order,
        severities,
        message,
        deletedHosts,
        clusterLevel,
        categories,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }
}
