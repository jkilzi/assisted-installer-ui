/* tslint:disable */
/* eslint-disable */
/**
 * AssistedInstall
 * Assisted installation
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ListManagedDomains } from '../models';
/**
 * ManagedDomainsApi - axios parameter creator
 * @export
 */
export const ManagedDomainsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * List of managed DNS domains.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2ListManagedDomains: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/v2/domains`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication userAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ManagedDomainsApi - functional programming interface
 * @export
 */
export const ManagedDomainsApiFp = function (configuration?: Configuration) {
  return {
    /**
     * List of managed DNS domains.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2ListManagedDomains(
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ListManagedDomains>>
    > {
      const localVarAxiosArgs = await ManagedDomainsApiAxiosParamCreator(
        configuration,
      ).v2ListManagedDomains(options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * ManagedDomainsApi - factory interface
 * @export
 */
export const ManagedDomainsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     * List of managed DNS domains.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2ListManagedDomains(
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<ListManagedDomains>> {
      return ManagedDomainsApiFp(configuration)
        .v2ListManagedDomains(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ManagedDomainsApi - object-oriented interface
 * @export
 * @class ManagedDomainsApi
 * @extends {BaseAPI}
 */
export class ManagedDomainsApi extends BaseAPI {
  /**
   * List of managed DNS domains.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ManagedDomainsApi
   */
  public async v2ListManagedDomains(
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<ListManagedDomains>> {
    return ManagedDomainsApiFp(this.configuration)
      .v2ListManagedDomains(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
