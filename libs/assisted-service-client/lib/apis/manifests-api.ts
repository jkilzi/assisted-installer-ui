/* tslint:disable */
/* eslint-disable */
/**
 * AssistedInstall
 * Assisted installation
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateManifestParams } from '../models';
import { InfraError } from '../models';
import { ListManifests } from '../models';
import { Manifest } from '../models';
import { UpdateManifestParams } from '../models';
/**
 * ManifestsApi - axios parameter creator
 * @export
 */
export const ManifestsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Creates a manifest for customizing cluster installation.
     * @param {CreateManifestParams} body The new manifest to create.
     * @param {string} clusterId The cluster for which a new manifest should be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2CreateClusterManifest: async (
      body: CreateManifestParams,
      clusterId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling v2CreateClusterManifest.',
        );
      }
      // verify required parameter 'clusterId' is not null or undefined
      if (clusterId === null || clusterId === undefined) {
        throw new RequiredError(
          'clusterId',
          'Required parameter clusterId was null or undefined when calling v2CreateClusterManifest.',
        );
      }
      const localVarPath = `/v2/clusters/{cluster_id}/manifests`.replace(
        `{${'cluster_id'}}`,
        encodeURIComponent(String(clusterId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication userAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes a manifest from the cluster.
     * @param {string} clusterId The cluster whose manifest should be deleted.
     * @param {string} fileName The manifest file name to delete from the cluster.
     * @param {string} [folder] The folder that contains the files. Manifests can be placed in &#x27;manifests&#x27; or &#x27;openshift&#x27; directories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2DeleteClusterManifest: async (
      clusterId: string,
      fileName: string,
      folder?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'clusterId' is not null or undefined
      if (clusterId === null || clusterId === undefined) {
        throw new RequiredError(
          'clusterId',
          'Required parameter clusterId was null or undefined when calling v2DeleteClusterManifest.',
        );
      }
      // verify required parameter 'fileName' is not null or undefined
      if (fileName === null || fileName === undefined) {
        throw new RequiredError(
          'fileName',
          'Required parameter fileName was null or undefined when calling v2DeleteClusterManifest.',
        );
      }
      const localVarPath = `/v2/clusters/{cluster_id}/manifests`.replace(
        `{${'cluster_id'}}`,
        encodeURIComponent(String(clusterId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication userAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      if (folder !== undefined) {
        localVarQueryParameter['folder'] = folder;
      }

      if (fileName !== undefined) {
        localVarQueryParameter['file_name'] = fileName;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Downloads cluster manifest.
     * @param {string} clusterId The cluster whose manifest should be downloaded.
     * @param {string} fileName The manifest file name to download.
     * @param {string} [folder] The folder that contains the files. Manifests can be placed in &#x27;manifests&#x27; or &#x27;openshift&#x27; directories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2DownloadClusterManifest: async (
      clusterId: string,
      fileName: string,
      folder?: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'clusterId' is not null or undefined
      if (clusterId === null || clusterId === undefined) {
        throw new RequiredError(
          'clusterId',
          'Required parameter clusterId was null or undefined when calling v2DownloadClusterManifest.',
        );
      }
      // verify required parameter 'fileName' is not null or undefined
      if (fileName === null || fileName === undefined) {
        throw new RequiredError(
          'fileName',
          'Required parameter fileName was null or undefined when calling v2DownloadClusterManifest.',
        );
      }
      const localVarPath = `/v2/clusters/{cluster_id}/manifests/files`.replace(
        `{${'cluster_id'}}`,
        encodeURIComponent(String(clusterId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication userAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      if (folder !== undefined) {
        localVarQueryParameter['folder'] = folder;
      }

      if (fileName !== undefined) {
        localVarQueryParameter['file_name'] = fileName;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Lists manifests for customizing cluster installation.
     * @param {string} clusterId The cluster for which the manifests should be listed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2ListClusterManifests: async (
      clusterId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'clusterId' is not null or undefined
      if (clusterId === null || clusterId === undefined) {
        throw new RequiredError(
          'clusterId',
          'Required parameter clusterId was null or undefined when calling v2ListClusterManifests.',
        );
      }
      const localVarPath = `/v2/clusters/{cluster_id}/manifests`.replace(
        `{${'cluster_id'}}`,
        encodeURIComponent(String(clusterId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication userAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates a manifest for customizing cluster installation.
     * @param {UpdateManifestParams} body The manifest to be updated.
     * @param {string} clusterId The cluster for which a new manifest should be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    v2UpdateClusterManifest: async (
      body: UpdateManifestParams,
      clusterId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      if (body === null || body === undefined) {
        throw new RequiredError(
          'body',
          'Required parameter body was null or undefined when calling v2UpdateClusterManifest.',
        );
      }
      // verify required parameter 'clusterId' is not null or undefined
      if (clusterId === null || clusterId === undefined) {
        throw new RequiredError(
          'clusterId',
          'Required parameter clusterId was null or undefined when calling v2UpdateClusterManifest.',
        );
      }
      const localVarPath = `/v2/clusters/{cluster_id}/manifests`.replace(
        `{${'cluster_id'}}`,
        encodeURIComponent(String(clusterId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'PATCH',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication userAuth required
      if (configuration && configuration.apiKey) {
        const localVarApiKeyValue =
          typeof configuration.apiKey === 'function'
            ? await configuration.apiKey('Authorization')
            : await configuration.apiKey;
        localVarHeaderParameter['Authorization'] = localVarApiKeyValue;
      }

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof body !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(body !== undefined ? body : {})
        : body || '';

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ManifestsApi - functional programming interface
 * @export
 */
export const ManifestsApiFp = function (configuration?: Configuration) {
  return {
    /**
     * Creates a manifest for customizing cluster installation.
     * @param {CreateManifestParams} body The new manifest to create.
     * @param {string} clusterId The cluster for which a new manifest should be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CreateClusterManifest(
      body: CreateManifestParams,
      clusterId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Manifest>>> {
      const localVarAxiosArgs = await ManifestsApiAxiosParamCreator(
        configuration,
      ).v2CreateClusterManifest(body, clusterId, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Deletes a manifest from the cluster.
     * @param {string} clusterId The cluster whose manifest should be deleted.
     * @param {string} fileName The manifest file name to delete from the cluster.
     * @param {string} [folder] The folder that contains the files. Manifests can be placed in &#x27;manifests&#x27; or &#x27;openshift&#x27; directories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2DeleteClusterManifest(
      clusterId: string,
      fileName: string,
      folder?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
      const localVarAxiosArgs = await ManifestsApiAxiosParamCreator(
        configuration,
      ).v2DeleteClusterManifest(clusterId, fileName, folder, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Downloads cluster manifest.
     * @param {string} clusterId The cluster whose manifest should be downloaded.
     * @param {string} fileName The manifest file name to download.
     * @param {string} [folder] The folder that contains the files. Manifests can be placed in &#x27;manifests&#x27; or &#x27;openshift&#x27; directories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2DownloadClusterManifest(
      clusterId: string,
      fileName: string,
      folder?: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Blob>>> {
      const localVarAxiosArgs = await ManifestsApiAxiosParamCreator(
        configuration,
      ).v2DownloadClusterManifest(clusterId, fileName, folder, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Lists manifests for customizing cluster installation.
     * @param {string} clusterId The cluster for which the manifests should be listed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2ListClusterManifests(
      clusterId: string,
      options?: AxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ListManifests>>
    > {
      const localVarAxiosArgs = await ManifestsApiAxiosParamCreator(
        configuration,
      ).v2ListClusterManifests(clusterId, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Updates a manifest for customizing cluster installation.
     * @param {UpdateManifestParams} body The manifest to be updated.
     * @param {string} clusterId The cluster for which a new manifest should be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2UpdateClusterManifest(
      body: UpdateManifestParams,
      clusterId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Manifest>>> {
      const localVarAxiosArgs = await ManifestsApiAxiosParamCreator(
        configuration,
      ).v2UpdateClusterManifest(body, clusterId, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * ManifestsApi - factory interface
 * @export
 */
export const ManifestsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     * Creates a manifest for customizing cluster installation.
     * @param {CreateManifestParams} body The new manifest to create.
     * @param {string} clusterId The cluster for which a new manifest should be created.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2CreateClusterManifest(
      body: CreateManifestParams,
      clusterId: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Manifest>> {
      return ManifestsApiFp(configuration)
        .v2CreateClusterManifest(body, clusterId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Deletes a manifest from the cluster.
     * @param {string} clusterId The cluster whose manifest should be deleted.
     * @param {string} fileName The manifest file name to delete from the cluster.
     * @param {string} [folder] The folder that contains the files. Manifests can be placed in &#x27;manifests&#x27; or &#x27;openshift&#x27; directories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2DeleteClusterManifest(
      clusterId: string,
      fileName: string,
      folder?: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<void>> {
      return ManifestsApiFp(configuration)
        .v2DeleteClusterManifest(clusterId, fileName, folder, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Downloads cluster manifest.
     * @param {string} clusterId The cluster whose manifest should be downloaded.
     * @param {string} fileName The manifest file name to download.
     * @param {string} [folder] The folder that contains the files. Manifests can be placed in &#x27;manifests&#x27; or &#x27;openshift&#x27; directories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2DownloadClusterManifest(
      clusterId: string,
      fileName: string,
      folder?: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Blob>> {
      return ManifestsApiFp(configuration)
        .v2DownloadClusterManifest(clusterId, fileName, folder, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Lists manifests for customizing cluster installation.
     * @param {string} clusterId The cluster for which the manifests should be listed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2ListClusterManifests(
      clusterId: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<ListManifests>> {
      return ManifestsApiFp(configuration)
        .v2ListClusterManifests(clusterId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Updates a manifest for customizing cluster installation.
     * @param {UpdateManifestParams} body The manifest to be updated.
     * @param {string} clusterId The cluster for which a new manifest should be updated.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async v2UpdateClusterManifest(
      body: UpdateManifestParams,
      clusterId: string,
      options?: AxiosRequestConfig,
    ): Promise<AxiosResponse<Manifest>> {
      return ManifestsApiFp(configuration)
        .v2UpdateClusterManifest(body, clusterId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ManifestsApi - object-oriented interface
 * @export
 * @class ManifestsApi
 * @extends {BaseAPI}
 */
export class ManifestsApi extends BaseAPI {
  /**
   * Creates a manifest for customizing cluster installation.
   * @param {CreateManifestParams} body The new manifest to create.
   * @param {string} clusterId The cluster for which a new manifest should be created.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ManifestsApi
   */
  public async v2CreateClusterManifest(
    body: CreateManifestParams,
    clusterId: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Manifest>> {
    return ManifestsApiFp(this.configuration)
      .v2CreateClusterManifest(body, clusterId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Deletes a manifest from the cluster.
   * @param {string} clusterId The cluster whose manifest should be deleted.
   * @param {string} fileName The manifest file name to delete from the cluster.
   * @param {string} [folder] The folder that contains the files. Manifests can be placed in &#x27;manifests&#x27; or &#x27;openshift&#x27; directories.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ManifestsApi
   */
  public async v2DeleteClusterManifest(
    clusterId: string,
    fileName: string,
    folder?: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    return ManifestsApiFp(this.configuration)
      .v2DeleteClusterManifest(clusterId, fileName, folder, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Downloads cluster manifest.
   * @param {string} clusterId The cluster whose manifest should be downloaded.
   * @param {string} fileName The manifest file name to download.
   * @param {string} [folder] The folder that contains the files. Manifests can be placed in &#x27;manifests&#x27; or &#x27;openshift&#x27; directories.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ManifestsApi
   */
  public async v2DownloadClusterManifest(
    clusterId: string,
    fileName: string,
    folder?: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Blob>> {
    return ManifestsApiFp(this.configuration)
      .v2DownloadClusterManifest(clusterId, fileName, folder, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Lists manifests for customizing cluster installation.
   * @param {string} clusterId The cluster for which the manifests should be listed.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ManifestsApi
   */
  public async v2ListClusterManifests(
    clusterId: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<ListManifests>> {
    return ManifestsApiFp(this.configuration)
      .v2ListClusterManifests(clusterId, options)
      .then((request) => request(this.axios, this.basePath));
  }
  /**
   * Updates a manifest for customizing cluster installation.
   * @param {UpdateManifestParams} body The manifest to be updated.
   * @param {string} clusterId The cluster for which a new manifest should be updated.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ManifestsApi
   */
  public async v2UpdateClusterManifest(
    body: UpdateManifestParams,
    clusterId: string,
    options?: AxiosRequestConfig,
  ): Promise<AxiosResponse<Manifest>> {
    return ManifestsApiFp(this.configuration)
      .v2UpdateClusterManifest(body, clusterId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
